%!PS-Adobe-2.0 EPSF-2.0
%%Title: 2chcomparedelta6ns.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Thu Mar 11 20:44:23 2010
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 302 226
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -80 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 240 scalefont setfont
1.000 UL
LTb
1656 720 M
63 0 V
2913 0 R
-63 0 V
stroke
1512 720 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 ( 1e-05)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1656 872 M
31 0 V
2945 0 R
-31 0 V
1656 1072 M
31 0 V
2945 0 R
-31 0 V
1656 1175 M
31 0 V
2945 0 R
-31 0 V
-2945 49 R
63 0 V
2913 0 R
-63 0 V
stroke
1512 1224 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 ( 0.0001)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1656 1376 M
31 0 V
2945 0 R
-31 0 V
1656 1576 M
31 0 V
2945 0 R
-31 0 V
1656 1679 M
31 0 V
2945 0 R
-31 0 V
-2945 49 R
63 0 V
2913 0 R
-63 0 V
stroke
1512 1728 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 ( 0.001)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1656 1880 M
31 0 V
2945 0 R
-31 0 V
1656 2080 M
31 0 V
2945 0 R
-31 0 V
1656 2183 M
31 0 V
2945 0 R
-31 0 V
-2945 49 R
63 0 V
2913 0 R
-63 0 V
stroke
1512 2232 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 ( 0.01)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1656 2384 M
31 0 V
2945 0 R
-31 0 V
1656 2584 M
31 0 V
2945 0 R
-31 0 V
1656 2687 M
31 0 V
2945 0 R
-31 0 V
-2945 49 R
63 0 V
2913 0 R
-63 0 V
stroke
1512 2736 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 ( 0.1)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1656 2888 M
31 0 V
2945 0 R
-31 0 V
1656 3088 M
31 0 V
2945 0 R
-31 0 V
1656 3191 M
31 0 V
2945 0 R
-31 0 V
-2945 49 R
63 0 V
2913 0 R
-63 0 V
stroke
1512 3240 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 ( 1)]
] -80.0 MRshow
grestore
1.000 UL
LTb
1656 720 M
0 63 V
0 2457 R
0 -63 V
stroke
1656 480 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (-4)]
] -80.0 MCshow
grestore
1.000 UL
LTb
2028 720 M
0 63 V
0 2457 R
0 -63 V
stroke
2028 480 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (-3)]
] -80.0 MCshow
grestore
1.000 UL
LTb
2400 720 M
0 63 V
0 2457 R
0 -63 V
stroke
2400 480 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (-2)]
] -80.0 MCshow
grestore
1.000 UL
LTb
2772 720 M
0 63 V
0 2457 R
0 -63 V
stroke
2772 480 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 (-1)]
] -80.0 MCshow
grestore
1.000 UL
LTb
3144 720 M
0 63 V
0 2457 R
0 -63 V
stroke
3144 480 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 ( 0)]
] -80.0 MCshow
grestore
1.000 UL
LTb
3516 720 M
0 63 V
0 2457 R
0 -63 V
stroke
3516 480 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 ( 1)]
] -80.0 MCshow
grestore
1.000 UL
LTb
3888 720 M
0 63 V
0 2457 R
0 -63 V
stroke
3888 480 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 ( 2)]
] -80.0 MCshow
grestore
1.000 UL
LTb
4260 720 M
0 63 V
0 2457 R
0 -63 V
stroke
4260 480 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 ( 3)]
] -80.0 MCshow
grestore
1.000 UL
LTb
4632 720 M
0 63 V
0 2457 R
0 -63 V
stroke
4632 480 M
gsave 0 setgray
[ [(Helvetica) 240.0 0.0 true true 0 ( 4)]
] -80.0 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
1656 720 M
2976 0 V
0 2520 V
-2976 0 V
0 -2520 V
LTb
240 1980 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 240.0 0.0 true true 0 (Error)]
] -80.0 MCshow
grestore
grestore
LTb
3144 120 M
gsave 0 setgray
[ [(Symbol) 240.0 0.0 true true 0 (D)]
[(Helvetica) 192.0 -72.0 true true 0 (0)]
[(Helvetica) 240.0 0.0 true true 0 ( \()]
[(Symbol) 240.0 0.0 true true 0 (D)]
[(Helvetica) 192.0 -72.0 true true 0 (2)]
[(Helvetica) 240.0 0.0 true true 0 (\))]
] -56.0 MCshow
grestore
1.000 UP
1.000 UP
6.000 UL
LT0
4632 2280 M
-37 -1 V
-37 -1 V
-38 -1 V
-37 -1 V
-37 -1 V
-37 -1 V
-37 -1 V
-38 -1 V
-37 -1 V
-37 -2 V
-37 -1 V
-37 -2 V
-38 -1 V
-37 -2 V
-37 -2 V
-37 -2 V
-37 -2 V
-38 -2 V
-37 -3 V
-37 -3 V
-37 -3 V
-37 -3 V
-38 -4 V
-37 -4 V
-37 -5 V
-37 -4 V
-37 -7 V
-38 -6 V
-37 -5 V
-37 -3 V
-37 -8 V
-37 -11 V
-38 39 V
-37 156 V
-37 197 V
-37 170 V
-37 130 V
-38 92 V
-37 56 V
-37 23 V
-37 -8 V
-37 -39 V
-38 -70 V
-37 -100 V
-37 -122 V
-37 -124 V
-37 -92 V
-38 -41 V
-37 -16 V
-37 -11 V
-37 -11 V
-37 -9 V
-38 -8 V
-37 -6 V
-37 -5 V
-37 -5 V
-37 -5 V
-38 -3 V
-37 -4 V
-37 -3 V
-37 -2 V
-37 -3 V
-38 -2 V
-37 -2 V
-37 -2 V
-37 -2 V
-37 -1 V
-38 -2 V
-37 -1 V
-37 -2 V
-37 -1 V
-37 -1 V
-38 -1 V
-37 -1 V
-37 -1 V
-37 -1 V
-37 -1 V
-38 -1 V
-37 0 V
1.000 UP
6.000 UL
LT1
4632 1291 M
-37 13 V
-37 10 V
-38 8 V
-37 12 V
-37 16 V
-37 12 V
-37 9 V
-38 14 V
-37 19 V
-37 16 V
-37 10 V
-37 15 V
-38 23 V
-37 21 V
-37 13 V
-37 17 V
-37 28 V
-38 28 V
-37 16 V
-37 18 V
-37 35 V
-37 39 V
-38 22 V
-37 18 V
-37 47 V
-37 60 V
-37 34 V
-38 13 V
-37 62 V
-37 116 V
-37 89 V
-37 22 V
-38 13 V
-37 175 V
-37 240 V
-37 191 V
-37 133 V
-38 84 V
-37 43 V
-37 5 V
-37 -31 V
-37 -66 V
-38 -101 V
-37 -138 V
-37 -175 V
-37 -208 V
-37 -213 V
-38 -160 V
-37 -84 V
-37 -51 V
-37 -42 V
-37 -35 V
-38 -30 V
-37 -27 V
-37 -25 V
-37 -22 V
-37 -21 V
-38 -20 V
-37 -18 V
-37 -17 V
-37 -16 V
-37 -15 V
-38 -15 V
-37 -13 V
-37 -13 V
-37 -12 V
-37 -12 V
-38 -11 V
-37 -11 V
-37 -10 V
-37 -10 V
-37 -9 V
-38 -9 V
-37 -8 V
-37 -9 V
-37 -8 V
-37 -7 V
-38 -8 V
-37 -7 V
1.000 UP
6.000 UL
LT2
4632 1221 M
-37 12 V
-37 7 V
-38 4 V
-37 9 V
-37 15 V
-37 10 V
-37 4 V
-38 11 V
-37 19 V
-37 14 V
-37 6 V
-37 11 V
-38 24 V
-37 21 V
-37 8 V
-37 12 V
-37 31 V
-38 31 V
-37 12 V
-37 11 V
-37 41 V
-37 46 V
-38 19 V
-37 9 V
-37 52 V
-37 77 V
-37 37 V
-38 -2 V
-37 61 V
-37 149 V
-37 113 V
-37 28 V
-38 -23 V
-37 143 V
-37 265 V
-37 212 V
-37 154 V
-38 119 V
-37 139 V
-37 98 V
-37 -79 V
-37 -199 V
-38 -137 V
-37 -158 V
-37 -198 V
-37 -250 V
-37 -318 V
-38 -386 V
-37 -328 V
-37 -112 V
-37 -41 V
-37 22 V
-38 35 V
-37 21 V
-37 17 V
-37 18 V
-37 12 V
-38 2 V
-37 1 V
-37 3 V
-37 3 V
-37 -2 V
-38 -3 V
-37 -1 V
-37 0 V
-37 -3 V
-37 -4 V
-38 -2 V
-37 -1 V
-37 -2 V
-37 -4 V
-37 -3 V
-38 -1 V
-37 -2 V
-37 -4 V
-37 -2 V
-37 -1 V
-38 -2 V
-37 -3 V
1.000 UL
LTb
1656 720 M
2976 0 V
0 2520 V
-2976 0 V
0 -2520 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Symbol Helvetica
