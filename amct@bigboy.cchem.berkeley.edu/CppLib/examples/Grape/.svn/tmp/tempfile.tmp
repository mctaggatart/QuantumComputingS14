/*
Name: Grape.cpp
Author: Jay Gambetta

Dependences: GrapeUnitary.hpp  
Brief Discription: This demonstrates grape for unitary for PHI_4 on a three level system like the transmon

Version History
	v0: Feb  11th, 2009.

time ./GrapeUnitary4.e GrapeUnitary4.dat


n = 10000
real	0m8.287s
user	0m7.917s
sys	0m0.134s

real	0m0.027s
user	0m0.023s
sys	0m0.003s


*/
#include <Grape.hpp>
using namespace std;

int main (int argc, char const *argv[]){

	verbose=no;
	cout << "Running program " << argv[0] << endl;

	//Grape inputs
	size_t num_time=2000, dim = 3, num_controls =2;
	Grape sys(dim, num_controls, num_time);
	size_t max_iter=1000;
	double tolerance=std::numeric_limits<double>::min(), fidelity=0.99999, base_a=2.0, epsilon=1, sigma=10, tgate=2000, dt;
	dt=tgate/double(num_time);
	// cout << dt << endl;
	sys.SetNumericalParameters(fidelity, dt, base_a, epsilon, tolerance, max_iter);
	
	
	matrix<complex<double> > a(dim,dim), ad(dim,dim), n(dim,dim), Hdrift(dim,dim), Hcontrol(dim,dim);
	double delta=0.0, Delta=-2.48;
	MOs::Destroy(a);
	ad = MOs::Dagger(a);
	n=ad*a;
	Hdrift = (delta-0.5*Delta)*n+ 0.5*Delta*n*n;
	sys.SetHdrift(Hdrift);
	Hdrift.SetOutputStyle(Matrix);
	cout << Hdrift << endl;
	
	
	vector<double> ucontrol0(num_time), ucontrol1(num_time);
	Hcontrol.SetOutputStyle(Matrix);
	//0th control
	Hcontrol=(a+ad)*0.5;
	cout << Hcontrol << endl;
	for(size_t j = 0; j < num_time; ++j)
		ucontrol0[j]=USs::TruncatedGaussian(j*dt, 0, tgate-1, M_PI, sigma);
		
	// ucontrol0[0]=0.459708525525570;
	// ucontrol0[1]= 1.131257802425068;
	// ucontrol0[2]= 1.141375745340172;
	// ucontrol0[3]= 0.467601637921447;
	
	sys.Setucontrol(ucontrol0,0);
	sys.SetHcontrol(Hcontrol,0);
	//1st control
	Hcontrol=(-complex<double>(0.0,1.0)*a+complex<double>(0.0,1.0)*ad)*0.5;
	cout << Hcontrol << endl;
	for(size_t j = 0; j < num_time; ++j)
		ucontrol1[j] = 0.0;
	
	// ucontrol1[0]=0.162214220135581;
	// ucontrol1[1]= 0.081573501077720;
	// ucontrol1[2]=-0.078427830387844;
	// ucontrol1[3]= -0.164644197055319;
	
	sys.Setucontrol(ucontrol1,1);
	sys.SetHcontrol(Hcontrol,1);
		
	//Initial condition
	matrix<complex<double> > U_desired(dim,dim);
	U_desired.SetOutputStyle(Matrix);
	MOs::Null(U_desired);
	U_desired(1,0)=std::complex<double>(1,0);
	U_desired(0,1)=std::complex<double>(1,0);
	// U_desired(2,2)=std::complex<double>(1,0);
	sys.SetRhoDesired(U_desired);	
	
	//run grape
	double to_ms =1000.0/CLOCKS_PER_SEC;
	int clo ;
	clo = clock();
	sys.UnitaryTransfer(&Grape::Phi4Sub2, &Grape::GradPhi4Sub2, NULL, NULL);
	clo = to_ms*(clock() - clo);
	cout << "time " << clo << endl;
	
	

	
	
	vector<double> ucontrol0final, ucontrol1final;
	// The finial control
	ucontrol0final.assign(sys.Getucontrol(0),sys.Getucontrol(0) + num_time );
	ucontrol1final.assign(sys.Getucontrol(1),sys.Getucontrol(1) + num_time );
	string const outfile = argv[1];
	ofstream dataout;
	UFs::OpenFile(outfile,dataout, 16);
	for(size_t j =0; j < num_time; j++){
		dataout << j*dt << '\t' << ucontrol0[j] << '\t' << ucontrol1[j] << '\t' << ucontrol0final[j] << '\t' << ucontrol1final[j] << endl;
	}
	dataout.close();
	return 0;
}