/*
Name: Grape.cpp
Author: Jay Gambetta

Dependences: GrapeUnitary.hpp  
Brief Discription: This demonstrates grape for lab frame vs rotating frame with large pixels

Version History
	v0: Feb  11th, 2009.

time ./GrapeUnitary4.e GrapeUnitary4.dat


n = 10000
real	0m8.287s
user	0m7.917s
sys	0m0.134s

real	0m0.027s
user	0m0.023s
sys	0m0.003s


*/
#include <Grape.hpp>
using namespace std;

int main (int argc, char const *argv[]){

	verbose=no;
	cout << "Running program " << argv[0] << endl;

	//Grape inputs
	size_t num_time=4, dim = 3, num_controls =3;
	size_t nsubpixels[]={1,1,4};
	Grape sys(dim, num_controls, num_time);
	size_t max_iter=10000;
	double tolerance=std::numeric_limits<double>::min(), fidelity=0.9999, base_a=2.0, epsilon=1, sigma=1, tgate=4, dt;
	dt=tgate/double(num_time);
	// cout << dt << endl;
	sys.SetNumericalParameters(fidelity, dt, base_a, epsilon, tolerance, max_iter, nsubpixels);
	
	
	matrix<complex<double> > a(dim,dim), ad(dim,dim), n(dim,dim), Hdrift(dim,dim),  HcontrolZ(dim,dim), HcontrolX(dim,dim), HcontrolY(dim,dim);
	matrix<complex<double> > Urot(dim,dim);
	vector<double> ucontrol0(num_time), ucontrol1(num_time);
	matrix<complex<double> > U_desired(dim,dim);
	U_desired.SetOutputStyle(Matrix);
	MOs::Null(U_desired);
	Hdrift.SetOutputStyle(Matrix);
	HcontrolX.SetOutputStyle(Matrix);
	HcontrolY.SetOutputStyle(Matrix);
	double delta=0.0, Delta=-2.48;
	MOs::Destroy(a);
	ad = MOs::Dagger(a);
	n=ad*a;
	
	
	//RWA frame
	Hdrift = (delta-0.5*Delta)*n+ 0.5*Delta*n*n;	
	sys.SetHdrift(Hdrift);
	cout << Hdrift << endl;
	
	//0th control
	HcontrolX=(a+ad)*0.5;
	cout << HcontrolX << endl;
	for(size_t j = 0; j < num_time; ++j)
		ucontrol0[j]=USs::Gaussian(j*dt, 0, tgate-1, M_PI, tgate/4);
	sys.Setucontrol(ucontrol0,0);
	sys.Normalizeucontrol(0, 3.14159265358);
	sys.Normalizeucontrol(0, 3.14159265358);
	sys.SetHcontrol(HcontrolX,0);
	//1st control
	HcontrolY=(-complex<double>(0.0,1.0)*a+complex<double>(0.0,1.0)*ad)*0.5;
		cout << HcontrolY << endl;
	for(size_t j = 0; j < num_time; ++j)
		ucontrol1[j] = 0.0;	
	sys.Setucontrol(ucontrol1,1);
	sys.SetHcontrol(HcontrolY,1);
	
	HcontrolZ = n;
	sys.Setucontrol(ucontrol1,2);
	sys.SetHcontrol(HcontrolZ,2);
				
	//Initial condition
	U_desired(1,0)=std::complex<double>(1,0);
	U_desired(0,1)=std::complex<double>(1,0);
	U_desired(2,2)=std::complex<double>(1,0);
	sys.SetRhoDesired(U_desired);	
	
	//run grape
	double to_ms =1000.0/CLOCKS_PER_SEC;
	int clo ;
	clo = clock();	
	sys.UnitaryTransfer(&Grape::Phi4Sub2, &Grape::GradPhi4Sub2);
	double* newcontrols0 = sys.Getucontrol(0);
	double* newcontrols1 = sys.Getucontrol(1);
	double* newcontrols2 = sys.Getucontrol(2);
	
	clo = to_ms*(clock() - clo);
	cout << "time " << clo << endl;
	
	//Lab frame
	size_t nlabsubpixels[]={1000,1000,4000};
	size_t old_num_time = num_time;
	
	num_time=4000;
	fidelity=0.99999;
	dt=tgate/double(num_time);
	Grape sysLab(dim, num_controls, num_time);
	sysLab.SetNumericalParameters(fidelity, dt, base_a, epsilon, tolerance, max_iter, nlabsubpixels);
	Urot(0,0) = 1;	
	Urot(1,1) = exp(-complex<double>(0.0,tgate*45));
	Urot(2,2) = exp(-complex<double>(0.0,2.0*tgate*45));
	U_desired=Urot*U_desired;
	sysLab.SetRhoDesired(U_desired);	
	
	Hdrift(1,1) = 45;
	Hdrift(2,2) = 2.0*Hdrift(1,1) + Delta;	
	sysLab.SetHdrift(Hdrift);
	cout << Hdrift << endl;
	
	vector<double> ucontrollab0(num_time), ucontrollab1(num_time), ucontrollab2(num_time);
	for(size_t j = 0; j < old_num_time; ++j)
	{	for(size_t l = 0; l < nlabsubpixels[0]; ++l)
		{	ucontrollab0[j*nlabsubpixels[0]+l]=newcontrols0[j];//USs::Gaussian(j*dt, 0, tgate-1, M_PI, tgate/2);	
			ucontrollab1[j*nlabsubpixels[0]+l]=newcontrols1[j];
			ucontrollab2[j*nlabsubpixels[0]+l]=newcontrols2[j];			
		}	
	}
	
	sysLab.Setucontrol(ucontrollab0,0);
	//sysLab.Normalizeucontrol(0, 3.14159265358);
	sysLab.Setucontrol(ucontrollab1,1);
	sysLab.Setucontrol(ucontrollab2,2);
	sysLab.SetHcontrol(2.0*HcontrolX,0);
	sysLab.SetHcontrol(2.0*HcontrolX,1);
	sysLab.SetHcontrol(n,2);
	
	clo = clock();	
	sysLab.UnitaryTransfer(&Grape::Phi4Sub2, &Grape::GradPhi4Sub2, &Grape::SetLab2Quadratures, &Grape::SetLab2Quadratures);
	clo = to_ms*(clock() - clo);
	cout << "time " << clo << endl;
		
	vector<double> ucontrol0final, ucontrol1final;
	// The finial control
	ucontrol0final.assign(sysLab.Getucontrol(0), sysLab.Getucontrol(0) + num_time );
	ucontrol1final.assign(sysLab.Getucontrol(1), sysLab.Getucontrol(1) + num_time );

	string const outfile = argv[1];
	ofstream dataout;
	UFs::OpenFile(outfile,dataout, 16);
	for(size_t j =0; j < num_time; j++){
		dataout << j*dt << '\t' << ucontrol0[j] << '\t' << ucontrol1[j] << '\t' << ucontrol0final[j] << endl;//'\t' << ucontrol1final[j] << endl;
	}
	dataout.close();
	return 0;
}